{"version":3,"file":"index.js","mappings":"AAAA;;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,mBAAD,CAAtB;;AACA,eAA+BA,OAAO,CAAC,WAAD,CAAtC;AAAA,IAAQG,OAAR,YAAQA,OAAR;AAAA,IAAiBC,SAAjB,YAAiBA,SAAjB;;AACA,gBAA0BJ,OAAO,CAAC,oBAAD,CAAjC;AAAA,IAAQK,QAAR,aAAQA,QAAR;AAAA,IAAkBC,GAAlB,aAAkBA,GAAlB;;AACA,IAAMC,MAAM,GAAGP,OAAO,CAAC,mBAAD,CAAtB;;AACA,gBAA0BA,OAAO,CAAC,mBAAD,CAAjC;AAAA,IAAQQ,MAAR,aAAQA,MAAR;AAAA,IAAgBC,KAAhB,aAAgBA,KAAhB;;AACA,IAAMC,IAAI,GAAGV,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAMW,QAAQ,GAAGX,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAMY,OAAO,GAAGZ,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAMa,MAAM,GAAGb,OAAO,CAAC,mBAAD,CAAtB;;AACA,gBAAqCA,OAAO,CAAC,mBAAD,CAA5C;AAAA,IAAQc,UAAR,aAAQA,UAAR;AAAA,IAAoBC,YAApB,aAAoBA,YAApB;;AAEAZ,OAAO,CACJa,OADHb,CACW,UADXA,EAEGc,WAFHd,CAEe,yBAFfA,EAGGe,MAHHf,CAGUE,QAHVF;AAKAA,OAAO,CACJa,OADHb,CACW,QADXA,EAEGc,WAFHd,CAEe,mCAFfA,EAGGe,MAHHf,CAGUK,MAHVL;AAKAA,OAAO,CACJa,OADHb,CACW,QADXA,EAEGc,WAFHd,CAEe,mCAFfA,EAGGe,MAHHf,CAGUU,MAHVV;AAKAA,OAAO,CACJa,OADHb,CACW,MADXA,EAEGc,WAFHd,CAEe,2BAFfA,EAGGe,MAHHf,CAGUO,IAHVP;AAKAA,OAAO,CACJa,OADHb,CACW,sBADXA,EAEGc,WAFHd,CAEe,oBAFfA,EAGGe,MAHHf,CAGUG,GAHVH;AAKAA,OAAO,CACJa,OADHb,CACW,eADXA,EAEGc,WAFHd,CAEe,mCAFfA,EAGGe,MAHHf,CAGUI,MAHVJ;AAKAA,OAAO,CACJa,OADHb,CACW,UADXA,EAEGc,WAFHd,CAEe,oCAFfA,EAGGe,MAHHf,CAGUQ,QAHVR;AAKAA,OAAO,CACJa,OADHb,CACW,OADXA,EAEGc,WAFHd,CAEe,uBAFfA,EAGGe,MAHHf,CAGUM,KAHVN;AAKAA,OAAO,CACJa,OADHb,CACW,gBADXA,EAEGc,WAFHd,CAEe,yBAFfA,EAGGe,MAHHf,CAGUS,OAHVT;AAKAA,OAAO,CACJa,OADHb,CACW,QADXA,EAEGc,WAFHd,CAEe,qBAFfA,EAGGe,MAHHf,CAGUW,UAHVX;AAKAA,OAAO,CACJa,OADHb,CACW,eADXA,EAEGc,WAFHd,CAEe,eAFfA,EAGGe,MAHHf,CAGUY,YAHVZ;;AAKA,IAAGD,MAAM,CAACiB,gBAAPjB,CAAwBA,MAAM,CAACkB,aAA/BlB,CAAH,EAAkD;AAChDmB,SAAO,CAACC,GAARD,CACEpB,KAAK,CAACsB,KAANtB,CACEF,MAAM,CAACyB,QAAPzB,CAAgB,QAAhBA,EAA0B;AACxB0B,oBAAgB,EAAE;AADM,GAA1B1B,CADFE,CADFoB;AAOD;;AACDlB,OAAO,CAACuB,KAARvB","names":["figlet","require","chalk","config","program","commander","clusters","add","select","topics","topic","show","consumer","offsets","groups","showConfig","updateConfig","command","description","action","getBooleanConfig","CONFIG_BANNER","console","log","green","textSync","horizontalLayout","parse"],"sources":["../src/index.js"],"sourcesContent":["#! /usr/bin/env node\nconst figlet = require('figlet')\nconst chalk = require('chalk')\nconst config = require('./services/config')\nconst { program, commander } = require('commander')\nconst { clusters, add } = require('./commands/servers')\nconst select = require('./commands/select')\nconst { topics, topic } = require('./commands/topics')\nconst show = require('./commands/show')\nconst consumer = require('./commands/consumer')\nconst offsets = require('./commands/offsets')\nconst groups = require('./commands/groups')\nconst { showConfig, updateConfig } = require('./commands/config')\n\nprogram\n  .command('clusters')\n  .description('List all kafka clusters')\n  .action(clusters)\n\nprogram\n  .command('topics')\n  .description('List all topics of selected kafka')\n  .action(topics)\n\nprogram\n  .command('groups')\n  .description('List all groups of selected kafka')\n  .action(groups)\n\nprogram\n  .command('show')\n  .description('Show all selected options')\n  .action(show)\n\nprogram\n  .command('add <name> <brokers>')\n  .description('Add a kafka server')\n  .action(add)\n\nprogram\n  .command('select <type>')\n  .description('Select a kafka server/topic/group')\n  .action(select)\n\nprogram\n  .command('consumer')\n  .description('Consume messages of selected topic')\n  .action(consumer)\n\nprogram\n  .command('topic')\n  .description('Get metadata of topic')\n  .action(topic)\n\nprogram\n  .command('offsets <type>')\n  .description('Get topic/group offsets')\n  .action(offsets)\n\nprogram\n  .command('config')\n  .description('Show current config')\n  .action(showConfig)\n\nprogram\n  .command('update-config')\n  .description('Update config')\n  .action(updateConfig)\n\nif(config.getBooleanConfig(config.CONFIG_BANNER)) {\n  console.log(\n    chalk.green(\n      figlet.textSync('k tool', {\n        horizontalLayout: 'full',\n      })\n    )\n  )\n}\nprogram.parse()\n"]}